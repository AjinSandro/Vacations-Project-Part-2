# All containers needed: 
services:

  # MySQL service: 
  database-service:

    # Image name to create from Dockerfile:
    image: sandropython1776/indulgences-database-image:1.0

    # Where is the location of the Dockerfile:
    build: ./Database

    # Container name to create: 
    container_name: indulgences-database-container

    # Named-volume for MySQL folder:
    volumes:
      - indulgences-database-volume:/var/lib/mysql

    # Environment variables needed by MySQL for creating the database:
    environment:
      # MYSQL_HOST: localhost # Where is the database host we're building --> Internally inside the container.
      MYSQL_USER: Alex # Inventing a database user.
      MYSQL_PASSWORD: Alex1776 # Inventing a database password.
      MYSQL_DATABASE: vacations_db # What is the database name.
      MYSQL_ROOT_PASSWORD: Alex1776 # Additional passwrod needed internaly by MySQL
    #   MYSQL_PORT: 3306

    # What to do if the container crashes: 
    restart: unless-stopped # Restart when crashes, unless we stopped it.

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 5s
      retries: 160

  # --------------------------------------------------------------------------------------

  # Django service (application): 
  django-service:

    # On which service we're depending on - for running and shutting-down order:
    depends_on:
      database-service:
        condition: service_healthy

    # Image name to create from Dockerfile:
    image: sandropython1776/indulgences-django-image:1.0

    # Where is the location of the Dockerfile:
    build: ./Django

    # Container name to create: 
    container_name: indulgences-django-container

    # Environment variables needed by our backend project for connecting to MySQL located in another container!
    environment:
      MYSQL_HOST: database-service # Where is the database host we're connecting to relative to docker network. the service name is the computer name on the network.
      DB_USER: Alex # Inventing a database user.
      DB_PASSWORD: Alex1776 # Inventing a database password.
      DB_NAME: vacations_db # What is the database name.
    #   MYSQL_PORT: 3306

    # What to do if the container crashes: 
    restart: unless-stopped # Restart when crashes, unless we stopped it.

    # Port mapping (host:container)
    ports:
      - 8000:8000

  # ------------------------------------------------------------------------------------------

  # React service:
  react-service:

    # On which service we're depending on - for running and shutting-down order:
    depends_on:
      - django-service

    # Image name to create from Dockerfile:
    image: sandropython1776/indulgences-react-image:1.0

    # Where is the location of the Dockerfile:
    build: ./React/indulgences

    # Container name to create: 
    container_name: indulgences-react-container

    # What to do if the container crashes: 
    restart: unless-stopped # Restart when crashes, unless we stopped it.

    # Port mapping (host:container)
    ports:
      - 3000:3000

# ------------------------------------------------------------------------------------------

# List all the named-volumes: 
volumes:
  indulgences-database-volume:


